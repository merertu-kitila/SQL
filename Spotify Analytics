# In this project I...
# (1) downloaded Spotify data from Kaggle
# (2) created a table to insert the Spotify data into
# (3) performed analytics on the data using SQL


# Creating table
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )

# I then inserted the Spotify data .csv into the table

# Next I explored the data using the following SQL queries




## Sort the top 50 songs on Spotify by popularity rating

SELECT track_name as "Song", artist_name as "Artist", popularity as "Popularity Rating", id as "Top 50 Rank"
FROM BIT_DB.Spotifydata 
ORDER BY popularity DESC
;



## What were the top 5 most popular songs in the Spotify Top 50?

SELECT ROW_NUMBER() OVER(ORDER BY popularity DESC) AS "Popularity Rank",
track_name as "Song", artist_name as "Arist" 
FROM BIT_DB.Spotifydata 
ORDER BY popularity DESC 
limit 5
;



## Which artists appeared more than once in the Spotify Top 50?

SELECT artist_name as Artist, COUNT(*) as "Number of Songs"
FROM BIT_DB.Spotifydata
GROUP BY artist_name
HAVING COUNT(*) >1;



##  Duration of Top 20 Songs

SELECT id as Rank, track_name as Song, artist_name as Artist, (duration_ms) / 1000 as "Duration in Seconds"
FROM BIT_DB.spotifydata
WHERE id <21;



## What is the overall popularity of the top 50 songs?

SELECT avg(popularity) as "Average Popularity of Spotify's Top 50"
FROM BIT_DB.Spotifydata;



## Best dancing songs from Spotify's Top 50

SELECT track_name as Song, artist_name as Artist, (danceability) * 100 as "Danceability Score"
FROM BIT_DB.spotifydata
ORDER BY danceability DESC
limit 10
;
